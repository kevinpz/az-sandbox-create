# No trigger because executed by Logic App
trigger: none

# Run on Microsoft hosted VM
pool:
    vmImage: 'ubuntu-latest'

# Load the module repo
resources:
  repositories:
  - repository: az-terraform-module
    type: github
    endpoint: Azure
    name: kevinpz/az-terraform-module

# Global variables
variables:
# Name of the service connection
- name: sc_name
  value: 'sc-mg-coffeetimedev'
# Location of the deployment
- name: location
  value: 'canadacentral'
# ID of the subscription for the tfstate
- name: backend_subscription_id
  value: 'b34b291e-89b2-4d63-9f9c-1ac3e8f43b4f'
# Storage account to store the tfstate
- name: stg_name
  value: 'stterraformkprintz'
# RG name for the storage account to store the tfstate
- name: stg_rg_name
  value: 'rg-mgmt'
# Name of the container to store the tfstate
- name: stg_container_name
  value: 'terraform'
# Billing account name
- name: billing_account_name
  value: 'demo'
# Enrollment account name
- name: enrollment_account_name
  value: 'demo'

# Input from the Logic App
parameters:
# Email of the requestor
- name: owner_name
  type: string
  default: $(owner_name)
# Name of the project
- name: project_name
  type: string
  default: $(project_name)
# Name of the project
- name: modules_list
  type: string
  default: $(modules_list)

# Pipeline deployment
stages:
- stage: CreateResources
  jobs:
  # Create the subscription
  - job: CreateResources
    steps:
      # Checkout the repositories
      - checkout: self
      - checkout: az-terraform-module

      # Install Terraform
      - task: TerraformInstaller@0
        displayName: Install Terraform
        inputs:
          terraformVersion: latest

      # Init Terraform
      - task: TerraformCLI@0
        displayName: Terraform init subscription
        condition: not(eq(variables.enrollment_account_name, 'demo'))
        inputs:
          workingDirectory: az-sandbox-create/terraform_subscription
          command: init
          backendType: azurerm
          backendServiceArm: '$(sc_name)'
          backendAzureRmSubscriptionId: '$(backend_subscription_id)'
          backendAzureRmResourceGroupName: '$(stg_rg_name)'
          backendAzureRmResourceGroupLocation: '$(location)'
          backendAzureRmStorageAccountName: '$(stg_name)'
          backendAzureRmContainerName: '$(stg_container_name)'
          backendAzureRmKey: '$(System.TeamProject)/$(Build.Repository.Name)/$(project_name)/subscription.tfstate'

      # Apply Terraform
      - task: TerraformCLI@0
        displayName: Terraform apply subscription
        condition: not(eq(variables.enrollment_account_name, 'demo'))
        inputs:
          workingDirectory: az-sandbox-create/terraform_subscription
          command: apply
          environmentServiceName: '$(sc_name)'
          providerAzureRmSubscriptionId: '6a81e3b4-5033-49c2-8dbe-ac820ef84451'
        env:
          TF_VAR_project_name: $(project_name)

      # Get the subscription ID
      - task: TerraformCLI@0
        displayName: Terraform output subscription
        condition: not(eq(variables.enrollment_account_name, 'demo'))
        inputs:
          workingDirectory: az-sandbox-create/terraform_subscription
          command: output

      # Get the subscription ID (test purpose)
      - task: Bash@3
        displayName: Set subscription ID
        condition: eq(variables.enrollment_account_name, 'demo')
        inputs:
          targetType: 'inline'
          script: echo "##vso[task.setvariable variable=TF_OUT_SUBSCRIPTION_ID;isOutput=truee]b34b291e-89b2-4d63-9f9c-1ac3e8f43b4f" 

      # Init Terraform for the resources
      - task: TerraformCLI@0
        displayName: Terraform init resources
        inputs:
          workingDirectory: az-sandbox-create/terraform_resources
          command: init
          backendType: azurerm
          backendServiceArm: '$(sc_name)'
          backendAzureRmSubscriptionId: '$(backend_subscription_id)'
          backendAzureRmResourceGroupName: '$(stg_rg_name)'
          backendAzureRmResourceGroupLocation: '$(location)'
          backendAzureRmStorageAccountName: '$(stg_name)'
          backendAzureRmContainerName: '$(stg_container_name)'
          backendAzureRmKey: '$(System.TeamProject)/$(Build.Repository.Name)/$(project_name)/resources.tfstate'

      # Deploy Terraform
      - task: TerraformCLI@0
        displayName: Terraform apply resources
        inputs:
          workingDirectory: az-sandbox-create/terraform_resources
          command: apply
          environmentServiceName: '$(sc_name)'
          providerAzureRmSubscriptionId: '$(TF_OUT_SUBSCRIPTION_ID)'
        env:
          TF_VAR_location: $(location)
          TF_VAR_owner_name: $(owner_name)
          TF_VAR_project_name: $(project_name)
          TF_VAR_modules_list: $(modules_list)
